#!/bin/bash

# Set the monitor layout based on which monitors are connected when using hyprland as DE. call this
# prior to calling the Hyprland command. For example:
#
#                           $HOME/bin/set_hypr_monitor_config && Hyprland
#
# NOTE: This script is currently taking args for the monitor modes. It would be nice to find a way
#       to read them from someplace like /sys/class/drm/ instead, so it can be more dynamic and choose
#       the best available mode and refresh rate automatically. I see that the available modes can
#       be read from /sys/class/drm/card[x-monitor-name]/modes, but I have not found a way to read
#       the available refresh rates for those modes yet. This setup has a lot of room for improvements.

# Prints a usage message and exits
usage() {
    echo -e "Usage: $0\n" >&2
    echo -e "The 'l' flag is for left monitor configuratin:\n-l <monitor device name> -l <resolution@frame-rate> -l <position i.e. 0x0, 1920x0, etc.> -l <scaling, ex: 1>\n" >&2
    echo -e "The 'c' flag is for center monitor configuratin:\n-c <monitor device name> -c <resolution@frame-rate> -c <position i.e. 0x0, 1920x0, etc.> -c <scaling, ex: 1>\n" >&2
    echo -e "The 'r' flag is for right monitor configuratin:\n-r <monitor device name> -r <resolution@frame-rate> -r <position i.e. 0x0, 1920x0, etc.> -r <scaling, ex: 1>\n" >&2
    echo -e "The 'b' flag is for builtin monitor configuratin:\n-b <monitor device name> -b <resolution@frame-rate> -b <position i.e. 0x0, 1920x0, etc.> -b <scaling, ex: 1>\n" >&2
    echo -e "The 's' flag is for secondary monitor preference being left or right:\n-s <l|r>\n" >&2
    echo -e "\nFor the 'l', 'c', 'r', and 'b' flags the order MUST match the above!\n" >&2
    echo -e "\nExample:\n" >&2
    echo -e "set_hypr_monitor_config -l DP-1 -l 1920x1080@75 -l 0x0 -l 1 -c DP-2 -c 1920x1080@75 -c 1920x0 -c 1 -r HDMI-A-1 -r 1920x1080@75 -r 3840x0 -r 1 -b eDP-1 -b 1366x768@60 -b 5760x0 -b 1 -s l\n" >&2
    exit 1
}

readonly HYPR_CONFIG_FILE="$HOME/.config/hypr/hyprland.conf"
readonly HYPR_CONFIG_FILE_BAK="$HOME/.config/hypr/hyprland.conf.bak"
readonly HYPR_CONFIG_TMP_FILE="/tmp/hypr_config"

if [[ ! -f $HYPR_CONFIG_FILE_BAK ]]; then
    cp $HYPR_CONFIG_FILE $HYPR_CONFIG_FILE_BAK
fi

readonly WAYBAR_CONFIG_FILE="$HOME/.config/waybar/config"
readonly WAYBAR_CONFIG_FILE_BAK="$HOME/.config/waybar/config.bak"

if [[ ! -f $WAYBAR_CONFIG_FILE_BAK ]]; then
    cp $WAYBAR_CONFIG_FILE $WAYBAR_CONFIG_FILE_BAK
fi

HYPR_MONITOR_CONFIG_AWK="$HOME/bin/set_hypr_monitor_config.awk"

if [[ ! -f "$HYPR_MONITOR_CONFIG_AWK" || ! -r "$HYPR_MONITOR_CONFIG_AWK" ]]; then
    echo "Error: $HYPR_MONITOR_CONFIG_AWK is an awk script which is required for $0 to function correctly." >&2
    [[ -f "$HYPR_MONITOR_CONFIG_AWK" && ! -r "$HYPR_MONITOR_CONFIG_AWK" ]] && \
        echo "Please add read permissions to $HYPR_MONITOR_CONFIG_AWK" >&2
    [[ ! -f "$HYPR_MONITOR_CONFIG_AWK" ]] && echo "$HYPR_MONITOR_CONFIG_AWK is not a regular file" >&2
    exit 1
fi

unset -v left_monitor
unset -v left_monitor_status
unset -v left_monitor_res_rate
unset -v left_monitor_placement
unset -v left_monitor_scaling
unset -v center_monitor
unset -v center_monitor_status
unset -v center_monitor_res_rate
unset -v center_monitor_placement
unset -v center_monitor_scaling
unset -v right_monitor
unset -v right_monitor_status
unset -v right_monitor_res_rate
unset -v right_monitor_placement
unset -v right_monitor_scaling
unset -v builtin_laptop_monitor
unset -v builtin_laptop_monitor_res_rate
unset -v builtin_laptop_monitor_placement
unset -v builtin_laptop_monitor_scaling
unset -v secondary_left
unset -v secondary_right
unset -v is_laptop

while getopts "l:c:r:b:s:vd" opt; do
    case $opt in
        l) left_monitor+=("$OPTARG");;
        c) center_monitor+=("$OPTARG");;
        r) right_monitor+=("$OPTARG");;
        b) builtin_monitor+=("$OPTARG");;
        s) if [[ "$OPTARG" = "l" ]]; then
               secondary_left=1
               secondary_right=0
           elif [[ "$OPTARG" = "r" ]]; then
               secondary_left=0
               secondary_right=1
           else
               echo "Invalid option for secondary monitor placement: $OPTARG" >&2
               usage
           fi
           ;;
        v) verbose=true;;
        d) dry_run=true;;
        \?) echo "Invalid option: -${OPTARG}" >&2
            usage;;
        :) echo "Option -${OPTARG} requires an argument!" >&2
            usage;;
    esac
done

shift "$(( OPTIND - 1 ))"

if [[ ! -z "$secondary_monitor" ]]; then
    echo "Secondary monitor placement preference required via -s" >&2
    usage
fi

if [[ ${#left_monitor[@]} -gt 0 ]]; then
    num_args=${#left_monitor[@]}
    if [[ $num_args -lt 4 ]]; then
        echo "Four args required for left monitor config, only $num_args found..." >&2
        usage
    else
        if [[ ! "${left_monitor[1]}" =~ ^[0-9]{4}x[0-9]{3,4}@[0-9]{2}$ ]]; then
            echo "invalid resolution@rate" >&2
            usage
        fi

        if [[ ! "${left_monitor[2]}" =~ ^[0-9]{1,4}x0$ ]]; then
            echo "invalid position" >&2
            usage
        fi

        if [[ ! "${left_monitor[3]}" =~ ^[0-9]$ ]]; then
            echo "invalid scaling" >&2
            usage
        fi
    fi
else
    left_monitor=("", "", "", "")
fi

if [[ ${#center_monitor[@]} -gt 0 ]]; then
    num_args=${#center_monitor[@]}
    if [[ $num_args -lt 4 ]]; then
        echo "Four args required for center monitor config, only $num_args found..." >&2
        usage
    else
        if [[ ! "${center_monitor[1]}" =~ ^[0-9]{4}x[0-9]{3,4}@[0-9]{2}$ ]]; then
            echo "invalid resolution@rate" >&2
            usage
        fi

        if [[ ! "${center_monitor[2]}" =~ ^[0-9]{1,4}x0$ ]]; then
            echo "invalid position" >&2
            usage
        fi

        if [[ ! "${center_monitor[3]}" =~ ^[0-9]$ ]]; then
            echo "invalid scaling" >&2
            usage
        fi
    fi
else
    center_monitor=("", "", "", "")
fi

if [[ ${#right_monitor[@]} -gt 0 ]]; then
    num_args=${#right_monitor[@]}
    if [[ $num_args -lt 4 ]]; then
        echo "Four args required for right monitor config, only $num_args found..." >&2
        usage
    else
        if [[ ! "${right_monitor[1]}" =~ ^[0-9]{4}x[0-9]{3,4}@[0-9]{2}$ ]]; then
            echo "invalid resolution@rate" >&2
            usage
        fi

        if [[ ! "${right_monitor[2]}" =~ ^[0-9]{1,4}x0$ ]]; then
            echo "invalid position" >&2
            usage
        fi

        if [[ ! "${right_monitor[3]}" =~ ^[0-9]$ ]]; then
            echo "invalid scaling" >&2
            usage
        fi
    fi
else
    right_monitor=("", "", "", "")
fi

if [[ ${#builtin_monitor[@]} -gt 0 ]]; then
    num_args=${#builtin_monitor[@]}
    if [[ $num_args -lt 4 ]]; then
        echo "Four args required for builtin monitor config, only $num_args found..." >&2
        usage
    else
        if [[ ! "${builtin_monitor[1]}" =~ ^[0-9]{4}x[0-9]{3,4}@[0-9]{2}$ ]]; then
            echo "invalid resolution@rate" >&2
            usage
        fi

        if [[ ! "${builtin_monitor[2]}" =~ ^[0-9]{1,4}x0$ ]]; then
            echo "invalid position" >&2
            usage
        fi

        if [[ ! "${builtin_monitor[3]}" =~ ^[0-9]$ ]]; then
            echo "invalid scaling" >&2
            usage
        fi
    fi
else
    builtin_monitor=("", "", "", "")
fi

left_monitor_status=''
center_monitor_status=''
right_monitor_status=''
is_laptop=0

readonly CONNECTED='connected'

for monitor_status_dir in /sys/class/drm/card[0-9]-*; do
    monitor="$(basename $monitor_status_dir | awk -F'card1-' '{ print $2 }')"
    status="$(cat ${monitor_status_dir}/status)"

    if [[ "$monitor" = "$left_monitor" ]]; then
        left_monitor_status="$status"
    elif [[ "$monitor" = "$center_monitor" ]]; then
        center_monitor_status="$status"
    elif [[ "$monitor" = "$right_monitor" ]]; then
        right_monitor_status="$status"
    elif [[ "$monitor" = "$builtin_monitor" ]]; then
        is_laptop=1
    fi
done

if [[ $verbose || $dry_run ]]; then
    echo "${left_monitor[0]} => $left_monitor_status"
    echo "${center_monitor[0]} => $center_monitor_status"
    echo "${right_monitor[0]} => $right_monitor_status"
fi

if [[ "$left_monitor_status" = $CONNECTED && \
      "$center_monitor_status" = $CONNECTED && \
      "$right_monitor_status" = $CONNECTED ]]; then

    if [[ $verbose || $dry_run ]]; then
        echo "... all monitors connected"
    fi

    sed -Ei "s/^    (\"output\": \[\").*(\", \],)/    \1${center_monitor[0]}\2/" $WAYBAR_CONFIG_FILE
elif [[ "$left_monitor_status" != $CONNECTED && \
        "$center_monitor_status" = $CONNECTED && \
        "$right_monitor_status" = $CONNECTED ]]; then

    if [[ $verbose || $dry_run ]]; then
        echo "... left monitor disconnected"
    fi

    builtin_monitor[2]="${right_monitor[2]}"
    right_monitor[2]="${center_monitor[2]}"
    center_monitor[2]="${left_monitor[2]}"

    if [[ $secondary_left -eq 1 ]]; then
        sed -Ei "s/^    (\"output\": \[\").*(\", \],)/    \1${right_monitor[0]}\2/" $WAYBAR_CONFIG_FILE
    else
        sed -Ei "s/^    (\"output\": \[\").*(\", \],)/    \1${center_monitor[0]}\2/" $WAYBAR_CONFIG_FILE
    fi
elif [[ "$left_monitor_status" = $CONNECTED && \
        "$center_monitor_status" != $CONNECTED && \
        "$right_monitor_status" = $CONNECTED ]]; then

    if [[ $verbose || $dry_run ]]; then
        echo "... center monitor disconnected"
    fi

    builtin_monitor[2]="${right_monitor[2]}"
    right_monitor[2]="${center_monitor[2]}"

    if [[ $secondary_left -eq 1 ]]; then
        sed -Ei "s/^    (\"output\": \[\").*(\", \],)/    \1${right_monitor[0]}\2/" $WAYBAR_CONFIG_FILE
    else
        sed -Ei "s/^    (\"output\": \[\").*(\", \],)/    \1${left_monitor[0]}\2/" $WAYBAR_CONFIG_FILE
    fi
elif [[ "$left_monitor_status" = $CONNECTED && \
        "$center_monitor_status" = $CONNECTED && \
        "$right_monitor_status" != $CONNECTED ]]; then

    if [[ $verbose || $dry_run ]]; then
        echo "... right monitor disconnected"
    fi

    builtin_monitor[2]="${right_monitor[2]}"

    if [[ $secondary_left -eq 1 ]]; then
        sed -Ei "s/^    (\"output\": \[\").*(\", \],)/    \1${center_monitor[0]}\2/" $WAYBAR_CONFIG_FILE
    else
        sed -Ei "s/^    (\"output\": \[\").*(\", \],)/    \1${left_monitor[0]}\2/" $WAYBAR_CONFIG_FILE
    fi
elif [[ "$left_monitor_status" = $CONNECTED && \
        "$center_monitor_status" != $CONNECTED && \
        "$right_monitor_status" != $CONNECTED ]]; then

    if [[ $verbose || $dry_run ]]; then
        echo "... center and right monitors disconnected"
    fi

    builtin_monitor[2]="${center_monitor[2]}"

    sed -Ei "s/^    (\"output\": \[\").*(\", \],)/    \1${left_monitor[0]}\2/" $WAYBAR_CONFIG_FILE
elif [[ "$left_monitor_status" != $CONNECTED && \
        "$center_monitor_status" = $CONNECTED && \
        "$right_monitor_status" != $CONNECTED ]]; then

    if [[ $verbose || $dry_run ]]; then
        echo "... left and right monitors disconnected"
    fi

    builtin_monitor[2]="${center_monitor[2]}"
    center_monitor[2]="${left_monitor[2]}"

    sed -Ei "s/^    (\"output\": \[\").*(\", \],)/    \1${center_monitor[0]}\2/" $WAYBAR_CONFIG_FILE
elif [[ "$left_monitor_status" != $CONNECTED && \
        "$center_monitor_status" != $CONNECTED && \
        "$right_monitor_status" = $CONNECTED ]]; then

    if [[ $verbose || $dry_run ]]; then
        echo "... left and center monitors disconnected"
    fi

    builtin_monitor[2]="${center_monitor[2]}"
    right_monitor[2]="${left_monitor[2]}"

    sed -Ei "s/^    (\"output\": \[\").*(\", \],)/    \1${right_monitor[0]}\2/" $WAYBAR_CONFIG_FILE
elif [[ "$left_monitor_status" != $CONNECTED && \
        "$center_monitor_status" != $CONNECTED && \
        "$right_monitor_status" != $CONNECTED ]]; then

    if [[ $verbose || $dry_run ]]; then
        echo "... all external monitors disconnected"
    fi

    builtin_monitor[2]="${left_monitor[2]}"

    sed -Ei "s/^    (\"output\": \[\").*(\", \],)/    \1${builtin_monitor[0]}\2/" $WAYBAR_CONFIG_FILE
fi

if [[ $verbose || $dry_run ]]; then
    echo -e "Monitor configurations\n-----------------\n"
    [[ ${#left_monitor[@]} -gt 0 ]] && echo -n "monitor = "
    i=0

    for arg in ${left_monitor[@]}; do
        if [[ $i -lt $(( ${#left_monitor[@]} - 1 )) ]]; then
            echo -n "$arg, "
        else
            echo "$arg"
        fi

        (( i++ ))
    done

    [[ ${#right_monitor[@]} -gt 0 ]] && echo -n "monitor = "
    i=0

    for arg in ${center_monitor[@]}; do
        if [[ $i -lt $(( ${#center_monitor[@]} - 1 )) ]]; then
            echo -n "$arg, "
        else
            echo "$arg"
        fi

        (( i++ ))
    done

    echo -n "monitor = "
    i=0

    for arg in ${right_monitor[@]}; do
        if [[ $i -lt $(( ${#right_monitor[@]} - 1 )) ]]; then
            echo -n "$arg, "
        else
            echo "$arg"
        fi

        (( i++ ))
    done

    [[ ${#builtin_monitor[@]} -gt 0 ]] && echo -n "monitor = "
    i=0

    for arg in ${builtin_monitor[@]}; do
        if [[ $i -lt $(( ${#builtin_monitor[@]} - 1 )) ]]; then
            echo -n "$arg, "
        else
            echo "$arg"
        fi

        (( i++ ))
    done

    echo -e "\n-----------------\n"
fi

awk -v left_monitor="${left_monitor[0]}" \
    -v left_monitor_status="$left_monitor_status" \
    -v left_monitor_res_rate=${left_monitor[1]} \
    -v left_monitor_placement=${left_monitor[2]} \
    -v left_monitor_scaling=${left_monitor[3]} \
    -v center_monitor="${center_monitor[0]}" \
    -v center_monitor_status="$center_monitor_status" \
    -v center_monitor_res_rate=${center_monitor[1]} \
    -v center_monitor_placement=${center_monitor[2]} \
    -v center_monitor_scaling=${center_monitor[3]} \
    -v right_monitor="${right_monitor[0]}" \
    -v right_monitor_status="$right_monitor_status" \
    -v right_monitor_res_rate=${right_monitor[1]} \
    -v right_monitor_placement=${right_monitor[2]} \
    -v right_monitor_scaling=${right_monitor[3]} \
    -v builtin_monitor="${builtin_monitor[0]}" \
    -v builtin_monitor_res_rate=${builtin_monitor[1]} \
    -v builtin_monitor_placement=${builtin_monitor[2]} \
    -v builtin_monitor_scaling=${builtin_monitor[3]} \
    -v is_laptop="$is_laptop" \
    -v secondary_left=$secondary_left \
    -v secondary_right=$secondary_right \
    -f "$HYPR_MONITOR_CONFIG_AWK" \
    $HYPR_CONFIG_FILE > $HYPR_CONFIG_TMP_FILE

if [[ $dry_run ]]; then
    cat $HYPR_CONFIG_TMP_FILE
else
    mv $HYPR_CONFIG_TMP_FILE "$HYPR_CONFIG_FILE"
fi

exit 0

